
start = statements

number_frac
    = "." chars:[0-9]*
        { return "." + chars.join(''); }

number
    = chars:[0-9]+ frac:number_frac?
        { return parseFloat(chars.join('') + frac); }

validfirstchar
    = [a-zA-Z_]

validchar
    = [0-9a-zA-Z_]

identifier
    = firstchar:validfirstchar chars:validchar*
        { return firstchar + chars.join(''); }

ws =
 [' '\t\r\n]*

expression
    = expr:comparative
        { return expr; }
		/
		expr:string
		{return expr;}

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = left:additive ws op:comp_op ws right:comparative
        { return {tag: op, left:left, right:right}; }
    / additive

additive_op = "+" / "-"

additive
    = left:multiplicative ws op:additive_op ws right:additive
        { return {tag:op, left:left, right:right}; }
    / multiplicative

mult_op = "*" / "/"

multiplicative
    = left:primary ws op:mult_op ws right:multiplicative
        { return {tag:op, left:left, right:right}; }
    / primary

primary
    = number
    / v:identifier "(" ws ")"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" ws args:arglist ws ")"
        { return {tag:"call", name:v, args:args}; }
    / "(" ws expr:expression ws ")"
        { return expr; }
	/ varname: identifier
    	{return {tag:"ident", name:varname}}

comma_expression = "," ws expr:expression
        { return expr; }

arglist
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }

string
	= "'" chars:[0-9a-zA-Z]*  "'"
		{return chars.join("");}

identifier
    = chars:[a-z]+
        { return chars.join(''); }

statements = statement*

statement
    ="define " ws v:identifier ws 
        "(" ws ")" ws "{" ws body:statements ws "}"  ws
        { return { tag:"define", 
                   name:v, args:[], body:body }; }
    / 
    "define " ws v:identifier ws 
        "(" ws args:ident_list ws ")" ws
        "{" ws body:statements ws "}"  ws
        { return { tag:"define",
                   name:v, args:args, body:body }; } 
	/
	v:identifier ":=" expr:expression ws ";" ws
        { return { tag:":=", left:v, right:expr }; }
        /
      "var" ws name:identifier ws ";" ws
      	{ return {tag: "var", name:name};}
      /
      "if" ws "(" ws condition:expression ws ")" ws "{" ws body:statements ws  "}" 
      	{return {tag:"if", expr: condition, body:body};}
        /
      "repeat" ws "(" ws condition:expression ws ")" ws "{" ws body:statements ws "}"  
      	{return {tag:"repeat", expr: condition, body:body};}
		/
		"while" ws "(" ws condition:expression ws ")" ws "{" ws body:statements ws "}"  
      	{return {tag:"while", expr: condition, body:body};}
		/

		expr:expression ws ";" ws
		{return expr;}


comma_identifier = "," ws v:identifier
        { return v; }

ident_list
    = first:identifier rest:comma_identifier*
        { return [first].concat(rest); }

	